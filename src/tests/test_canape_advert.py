#!/usr/bin/env python3
"""
Test sp√©cifique pour l'extraction de texte de la publicit√© "ON RACH√àTE VOTRE CANAP√â"
"""

import os
import sys
from pathlib import Path
import pytest

# Ajouter le r√©pertoire parent au chemin pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.text_extractor import TextExtractor


def test_canape_advert_text_extraction():
    """
    Teste l'extraction du texte de la publicit√© pour le canap√©
    
    Cette fonction recherche l'image publicitaire dans les r√©pertoires courants
    et applique l'extraction de texte pour v√©rifier que le texte 
    'ON RACH√àTE VOTRE CANAP√â JUSQU'√Ä 2000‚Ç¨*' est bien d√©tect√©.
    """
    # Chercher l'image dans les emplacements possibles
    image_found = False
    
    # V√©rifier si un chemin d'image est fourni en argument
    custom_image_path = None
    if len(sys.argv) > 1 and os.path.exists(sys.argv[1]):
        custom_image_path = sys.argv[1]
        print(f"Utilisation de l'image personnalis√©e: {custom_image_path}")
    
    image_paths = [
        # Utiliser l'image personnalis√©e si fournie
        custom_image_path,
        # Chercher directement dans le r√©pertoire courant
        "image_101039.png",
        # Ou dans d'autres emplacements possibles
        "src/data/image_101039.png",
        "data/image_101039.png",
        # Recherche g√©n√©rique
        *Path(".").glob("**/image_101039.png")
    ]
    
    # Filtrer les chemins qui existent (et ne sont pas None)
    valid_paths = [str(p) for p in image_paths if p and Path(p).exists()]
    
    if not valid_paths:
        pytest.skip("Image publicitaire 'image_101039.png' non trouv√©e")
    
    image_path = valid_paths[0]
    print(f"Image trouv√©e: {image_path}")
    
    # V√©rifier quels moteurs OCR sont disponibles
    available_engines = {}
    
    # Tester si Tesseract est install√©
    try:
        import subprocess
        result = subprocess.run(["tesseract", "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            available_engines["tesseract"] = True
            print("‚úÖ Tesseract est install√©:", result.stdout.split("\n")[0])
        else:
            print("‚ùå Tesseract n'est pas correctement install√©")
    except FileNotFoundError:
        print("‚ùå Tesseract n'est pas install√© sur ce syst√®me")
    
    # Tester si EasyOCR est disponible
    try:
        import importlib
        easyocr_spec = importlib.util.find_spec("easyocr")
        if easyocr_spec is not None:
            available_engines["easyocr"] = True
            print("‚úÖ EasyOCR est disponible")
        else:
            print("‚ùå EasyOCR n'est pas install√©")
    except ImportError:
        print("‚ùå EasyOCR n'est pas install√©")
    
    if not available_engines:
        pytest.skip("Aucun moteur OCR n'est disponible (ni Tesseract, ni EasyOCR)")
    
    # Texte attendu (approximatif - l'OCR peut ne pas √™tre parfait)
    expected_text_parts = [
        "ON", "RACHETE", "RACH", "CANAPE", "CANAP", "VOTRE", 
        "JUSQU", "2000", "‚Ç¨", "HOMESALONS", "HOME", "SALONS"
    ]
    
    # Initialiser l'extracteur de texte
    extractor = TextExtractor()
    
    # Essayer plusieurs m√©thodes d'extraction
    extraction_modes = []
    
    # V√©rifier quels modes sont disponibles
    try:
        import pytesseract
        extraction_modes.append("pytesseract")
    except ImportError:
        print("üìù pytesseract n'est pas disponible")
    
    try:
        import easyocr
        extraction_modes.append("easyocr")
    except ImportError:
        print("üìù easyocr n'est pas disponible")
    
    # Toujours essayer docling en dernier
    if "docling" not in extraction_modes:
        extraction_modes.append("docling")
    
    if not extraction_modes:
        pytest.skip("Aucune m√©thode d'extraction disponible")
    
    print(f"üîç M√©thodes d'extraction disponibles: {', '.join(extraction_modes)}")
    
    # Variables pour stocker les r√©sultats
    best_result = None
    best_score = 0
    results = {}
    
    # Tester chaque m√©thode d'extraction
    for mode in extraction_modes:
        print(f"\nüìã Test avec mode: {mode}")
        
        try:
            # Extraire le texte
            if mode == "docling":
                # Pour docling, essayer avec diff√©rents moteurs OCR
                ocr_engines = ["easyocr"] if "easyocr" in available_engines else []
                if not ocr_engines:
                    print("‚ö†Ô∏è Aucun moteur OCR disponible pour Docling, utilisation de la m√©thode g√©n√©rique")
                    extracted_text = extractor.extract_text(image_path, fallback=True)
                else:
                    for ocr_engine in ocr_engines:
                        try:
                            print(f"  üîç Essai avec moteur OCR: {ocr_engine}")
                            extracted_text = extractor.extract_text_with_docling(image_path, ocr_engine)
                            break
                        except Exception as e:
                            print(f"  ‚ùå Erreur avec {ocr_engine}: {str(e)}")
                            extracted_text = ""
            elif mode == "pytesseract":
                extracted_text = extractor.extract_text_with_pytesseract(image_path)
            elif mode == "easyocr":
                extracted_text = extractor.extract_text_with_easyocr_direct(image_path)
            else:
                print(f"‚ö†Ô∏è Mode inconnu: {mode}")
                continue
            
            # Afficher le texte extrait
            print("\n=== Texte extrait ===")
            print(extracted_text if extracted_text else "[Aucun texte extrait]")
            print("===\n")
            
            if not extracted_text or len(extracted_text.strip()) == 0:
                print("‚ö†Ô∏è ATTENTION: Aucun texte n'a √©t√© extrait!")
                results[mode] = {"text": "", "score": 0, "matches": []}
                continue
            
            # Convertir en majuscules pour une comparaison insensible √† la casse
            extracted_text_upper = extracted_text.upper()
            
            # Afficher chaque mot du texte extrait pour le d√©bogage
            words = [w.strip() for w in extracted_text_upper.split() if w.strip()]
            print(f"Mots d√©tect√©s ({len(words)}): {', '.join(words[:10])}...")
            
            # V√©rifier que le texte extrait contient les parties attendues
            matches = []
            for expected in expected_text_parts:
                found = False
                expected_upper = expected.upper()
                
                # V√©rification exacte
                if expected_upper in extracted_text_upper:
                    found = True
                    matches.append(expected)
                    print(f"‚úÖ Trouv√© exact: '{expected}'")
                    continue
                
                # V√©rification approximative
                for word in words:
                    if len(expected_upper) >= 3 and expected_upper[:3] in word:
                        found = True
                        matches.append(expected)
                        print(f"‚úÖ Trouv√© approximatif: '{expected}' dans '{word}'")
                        break
            
            # Calculer le score
            match_ratio = len(matches) / len(expected_text_parts)
            print(f"Correspondance: {len(matches)}/{len(expected_text_parts)} ({match_ratio:.0%})")
            
            # Stocker les r√©sultats
            results[mode] = {
                "text": extracted_text,
                "score": match_ratio,
                "matches": matches
            }
            
            # Mettre √† jour le meilleur r√©sultat
            if match_ratio > best_score:
                best_score = match_ratio
                best_result = mode
            
        except Exception as e:
            print(f"‚ùå Erreur avec {mode}: {str(e)}")
            results[mode] = {"text": "", "score": 0, "matches": [], "error": str(e)}
    
    # Afficher un r√©sum√© des r√©sultats
    print("\n===== R√âSUM√â DES R√âSULTATS =====")
    for mode, result in results.items():
        print(f"{mode}: {result['score']:.0%} ({len(result.get('matches', []))}/{len(expected_text_parts)} correspondances)")
    
    # V√©rifier qu'au moins une m√©thode a donn√© des r√©sultats
    if best_result:
        print(f"\n‚úÖ Meilleure m√©thode: {best_result} avec {best_score:.0%}")
        # Accepter le test si au moins une m√©thode a trouv√© du texte (m√™me avec un score bas)
        assert best_score > 0, "Aucune m√©thode n'a pu extraire de texte pertinent"
    else:
        # Si nous arrivons ici, c'est qu'aucune m√©thode n'a fonctionn√©
        print("\n‚ö†Ô∏è Aucune m√©thode n'a r√©ussi √† extraire du texte")
        print("Pour r√©soudre ce probl√®me, vous pouvez :")
        print("1. Installer Tesseract-OCR ou EasyOCR sur votre syst√®me")
        print("2. Essayer avec une image de meilleure qualit√©")
        pytest.skip("Extraction de texte impossible avec les m√©thodes disponibles")


if __name__ == "__main__":
    # Ex√©cuter le test directement si le script est lanc√©
    try:
        test_canape_advert_text_extraction()
        print("\n‚úÖ Test termin√© avec succ√®s")
    except Exception as e:
        print(f"\n‚ùå √âchec du test: {str(e)}")
        sys.exit(1) 