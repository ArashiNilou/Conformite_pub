#!/usr/bin/env python3
"""
Script pour ex√©cuter les tests d'extraction de texte
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path

# Ajouter le r√©pertoire parent au chemin pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def run_specific_test(test_file: str, verbose: bool = False) -> bool:
    """
    Ex√©cute un test sp√©cifique
    
    Args:
        test_file: Chemin vers le fichier de test
        verbose: Afficher les logs d√©taill√©s
        
    Returns:
        bool: True si le test a r√©ussi, False sinon
    """
    print(f"\nüß™ Ex√©cution du test: {test_file}")
    
    cmd = ["python", test_file]
    if verbose:
        print(f"Commande: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=False)
        success = result.returncode == 0
        
        if success:
            print(f"‚úÖ Test {test_file} r√©ussi")
        else:
            print(f"‚ùå Test {test_file} √©chou√© (code {result.returncode})")
            
        return success
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du test {test_file}: {str(e)}")
        return False


def run_pytest(test_dir: str, verbose: bool = False) -> bool:
    """
    Ex√©cute tous les tests avec pytest
    
    Args:
        test_dir: R√©pertoire des tests
        verbose: Afficher les logs d√©taill√©s
        
    Returns:
        bool: True si tous les tests ont r√©ussi, False sinon
    """
    print(f"\nüß™ Ex√©cution des tests avec pytest dans {test_dir}")
    
    cmd = ["pytest", "-xvs", test_dir] if verbose else ["pytest", test_dir]
    
    try:
        result = subprocess.run(cmd, check=False)
        success = result.returncode == 0
        
        if success:
            print("‚úÖ Tous les tests ont r√©ussi")
        else:
            print(f"‚ùå Certains tests ont √©chou√© (code {result.returncode})")
            
        return success
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des tests: {str(e)}")
        return False


def run_all_tests(verbose: bool = False) -> int:
    """
    Ex√©cute tous les tests d'extraction de texte
    
    Args:
        verbose: Afficher les logs d√©taill√©s
        
    Returns:
        int: Code de retour (0 si succ√®s, 1 sinon)
    """
    test_dir = os.path.dirname(os.path.abspath(__file__))
    print(f"üìÅ R√©pertoire des tests: {test_dir}")
    
    # Test sp√©cifique pour la publicit√© du canap√©
    canape_test = os.path.join(test_dir, "test_canape_advert.py")
    canape_test_success = False
    
    if os.path.exists(canape_test):
        canape_test_success = run_specific_test(canape_test, verbose)
    else:
        print(f"‚ö†Ô∏è Test sp√©cifique non trouv√©: {canape_test}")
    
    # Ex√©cuter tous les tests avec pytest
    pytest_success = run_pytest(test_dir, verbose)
    
    # R√©sum√©
    print("\n=== R√©sum√© des tests ===")
    if os.path.exists(canape_test):
        print(f"Test publicit√© canap√©: {'‚úÖ' if canape_test_success else '‚ùå'}")
    print(f"Tests pytest: {'‚úÖ' if pytest_success else '‚ùå'}")
    
    # Retourner le code de sortie
    if (os.path.exists(canape_test) and not canape_test_success) or not pytest_success:
        return 1
    return 0


def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description="Ex√©cute les tests d'extraction de texte")
    parser.add_argument("-v", "--verbose", action="store_true", help="Afficher les logs d√©taill√©s")
    parser.add_argument("--canape", action="store_true", help="Ex√©cuter uniquement le test de la publicit√© canap√©")
    parser.add_argument("--pytest", action="store_true", help="Ex√©cuter uniquement les tests pytest")
    
    args = parser.parse_args()
    
    # Si aucune option n'est sp√©cifi√©e, ex√©cuter tous les tests
    if not (args.canape or args.pytest):
        return run_all_tests(args.verbose)
    
    success = True
    
    # Ex√©cuter le test sp√©cifique de la publicit√© canap√©
    if args.canape:
        test_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "test_canape_advert.py")
        if os.path.exists(test_file):
            success = run_specific_test(test_file, args.verbose) and success
        else:
            print(f"‚ö†Ô∏è Test sp√©cifique non trouv√©: {test_file}")
            success = False
    
    # Ex√©cuter les tests pytest
    if args.pytest:
        test_dir = os.path.dirname(os.path.abspath(__file__))
        success = run_pytest(test_dir, args.verbose) and success
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main()) 